;;; CP/M BIOS implementation (needs to fit into 1536 bytes)

	include "../lib/hw.z80"
	include "../lib/cf.z80"
CPM_ROM_LOC:	equ 0x2000
	
_TODO:
	RET
	
;;; ============================================================================
;;; Cold boot
;;; ============================================================================
_BOOT:
	JP	_WBOOT_SkipRom

;;; ============================================================================
;;; Warm boot - reloads CP/M from ROM
;;;   We store the CP/M binary at 0x2000 in ROM, so switch out LO-RAM,
;;;   calculate difference between CBASE and BOOT labels (i.e. size of CP/M)
;;;   and copy that many bytes to address starting CBASE. Switch back to LO-RAM
;;;   after doing this
;;; ============================================================================
_WBOOT:
	XOR	A
	OUT	(0x80), A	; select lo-rom
	CCF
	LD	HL, BOOT
	LD	DE, CBASE
	SBC	HL, DE		; size of image
	LD	B, H
	LD	C, L
	LD	HL, CPM_ROM_LOC	; source
	LD	DE, CBASE	; destination
	LDIR
_WBOOT_SkipRom:
	XOR	A
	OUT	(0x80), A	; select lo-ram

	XOR	A
	LD	(IOBYTE), A
	LD	(TDRIVE), A

	LD 	a, 0c3h		;c3 is a jmp instruction
	LD	(0),A		;for jmp to wboot
	LD	HL, WBOOT	;wboot entry point
	LD	(1),HL		;set address field for jmp at 0
;
	LD	(5),A		;for jmp to bdos
	LD	HL, FBASE	;bdos entry point
	LD	(6),HL		;address field of Jump at 5 to bdos
;
	LD	BC, 80h		;default dma address is 80h
	CALL	SETDMA
;
 	EI			;enable the interrupt system
 	LD	A,(TDRIVE)	;get current disk number
 	CP	1		;see if valid disk number
 	JP	C, _WBOOT_DiskOk	;disk valid, go to ccp
 	LD	A,0		;invalid disk, change to disk 0
_WBOOT_DiskOk:
	LD 	C, A		;send to the ccp
	JP	CBASE		; launch CP/M

;;; ============================================================================
;;; Console status
;;; sets A to 0x00 if no character is ready to be read
;;; sets A to 0xFF if a character is ready to be read
;;; ============================================================================
_CONST:
	IN	A, (UART_LSR)
	BIT	0, A
 	JP 	Z, _CONST_NoChar
	LD	A, 0xFF
	RET
_CONST_NoChar:	
	LD	A, 0x00
	RET

;;; ============================================================================
;;; Console in
;;; reads a character and puts it in A (blocking)
;;; ============================================================================
_CONIN:
	IN	A, (UART_LSR)	; Wait for a character to become available in RHR
	BIT	0, A
	JP	Z, _CONIN
	IN	A, (UART_RHR)	; Read from RHR
	RET	

;;; ============================================================================
;;; Console out
;;; writes the character in C
;;; ============================================================================
_CONOUT:
	IN	A, (UART_LSR)
	BIT	5, A
 	JP 	Z, _CONOUT
	LD	A, C
	OUT	(UART_THR), A	
	RET

;;; ============================================================================
;;; Go to track 0
;;; ============================================================================
_HOME:	
	LD	C, 0
	CALL	SETTRK
	RET

;;; ============================================================================
;;; No sector translation
;;; ============================================================================	
_SECTRN:
	EX	DE, HL
	ADD	HL, BC
	RET

;;; ============================================================================
;;; Select disk, for now we only support A (primary CF)
;;; ============================================================================	
_SELDSK:
	LD	HL, 0x0000	; HL <- 0 indicates error
	LD	A, C
	CP	1
	RET	NC
	CALL	CF_Init
	LD	(DISK_SELECTED), A
	LD	HL, CF_DPH
	RET

;;; ============================================================================
;;; Set buffer address for reading from/writing to disk 
;;; ============================================================================
_SETDMA:
	LD	(DISK_DMA), BC
	RET

;;; ============================================================================
;;; Set next track to access on disk
;;; ============================================================================
_SETTRK:
	LD	(DISK_TRACK), BC
	RET

;;; ============================================================================
;;; Set next sector to access on disk
;;; ============================================================================
_SETSEC:
	LD	(DISK_SECTOR), BC
	RET

;;; ============================================================================
;;; Reads a sector from the disk
;;; ============================================================================
_READ:
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	HL, CF_SCRATCH	; first load a block
	LD	DE, (DISK_TRACK)
	CALL	CF_ReadSector
	LD	BC, 128		; copy the relevant 128 bytes to the DMA buffer
	LD	DE, (DISK_DMA)
	LD	A, (DISK_SECTOR) ; which sector do we want?
	CP	0
	JP	Z, _READ_0
	CP	1
	JP	Z, _READ_1
	CP	2
	JP	Z, _READ_2	; else fall through to 3
_READ_3:
	LD	HL, (CF_SCRATCH+(128*3))
	JP	_READ_DO
_READ_2:	
	LD	HL, (CF_SCRATCH+(128*2))
	JP	_READ_DO
_READ_1:	
	LD	HL, (CF_SCRATCH+(128*1))
	JP	_READ_DO
_READ_0:	
	LD	HL, CF_SCRATCH
_READ_DO:
	LDIR
	XOR	A		; done, set A to 0 for success
	POP	BC
	POP	DE
	POP	HL
	RET

;;; ============================================================================
;;; Writes a sector to the disk
;;; ============================================================================
_WRITE:
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	HL, CF_SCRATCH	; load the block first so we can update only 128b of it
	LD	DE, (DISK_TRACK)
	CALL	CF_ReadSector
	LD	BC, 128		; we're adjusting only one sector
	LD	HL, (DISK_DMA)
	LD	A, (DISK_SECTOR) ; which sector do we want?
	CP	0
	JP	Z, _WRITE_0
	CP	1
	JP	Z, _WRITE_1
	CP	2
	JP	Z, _WRITE_2	; else fall through to 3
_WRITE_3:
	LD	DE, (CF_SCRATCH+(128*3))
	JP	_WRITE_DO
_WRITE_2:	
	LD	DE, (CF_SCRATCH+(128*2))
	JP	_WRITE_DO
_WRITE_1:
	LD	DE, (CF_SCRATCH+(128*1))
	JP	_WRITE_DO
_WRITE_0:
	LD	DE, CF_SCRATCH
_WRITE_DO:
	LDIR			; copy new sector data into buffer
	LD	DE, (DISK_TRACK) ; write the modified block back to disk
	LD	HL, CF_SCRATCH
	CALL	CF_WriteBlock
	XOR	A		; done, set A to 0 for success
	POP	BC
	POP	DE
	POP	HL
	RET


;;;  CF disk parameter header
CF_DPH:
	dw 	0x0000		; no translation table
	dw	0x0000		; scratch area
	dw	0x0000
	dw	0x0000
	dw 	DIRBF		; sector buffer
	dw	CF_DPB
	dw 	0		; no CSV
;;; dw   CF_CSV
	dw	CF_ALV

CF_DPB:
	dw	4		; we are pretending a cf 512b block is a track
	db 	4		; block shift factor
	db	15		; block mask
	db	0		; extent mask
	dw	4095		; number of blocks on disk - 1
	dw	511		; number of directory entries - 1
	db	0xFF		; al0
	db	0x0		; al1
	dw	0x0000		; csv size (0 for fixed disk) or num directories / 4 rounded up
	dw	0x0000		; number of reserved tracks (none for us, we load CP/M from ROM)

;;; variables
DISK_SELECTED:	db	0x00
DISK_DMA:	dw	0x0000
DISK_TRACK:	dw	0x0000
DISK_SECTOR:	dw	0x0000
DIRBF:		defs	128
CF_ALV:		defs	512	; 8 bits per block
;; CF_CSV:		defs	31	
;;; Verify in labels.txt that this symbol is not higher than 0xFE00 
CF_SCRATCH:	 defs 	512 	;TODO we could cache the last track we read/write and hence avoid doing a read again if we already have it in the buffer
	
