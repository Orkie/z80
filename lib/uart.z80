;;; Controls the UART at 0x00

UART_THR:	equ 0x00
UART_RHR:	equ 0x00
UART_DLL:	equ 0x00
UART_IER:	equ 0x01
UART_DLM:	equ 0x01
UART_FCR:	equ 0x02
UART_LCR:	equ 0x03
UART_LSR:	equ 0x05
UART_SPR:	equ 0x07

;;; ============================================================================
;;; Initialise UART, 9600 8N1
;;; ============================================================================
UART_Init:
	IN 	A, (UART_LCR)	; Enable access to divisor registers
	SET 	7, A
	OUT 	(0x03), A	

	LD	A, 0x00		; Set divisor to 12, 9600 baud
	OUT	(UART_DLM), A
	LD	A, 12
	OUT	(UART_DLL), A

	LD	A, %00000011	; 8N1, reset divisor latch
	OUT 	(UART_LCR), A

	LD	A, %00000111	; Enable FIFO
	OUT 	(UART_FCR), A

	LD	A, %00000000	; Disable interrupts
	OUT 	(UART_IER), A

	LD	A, 1
	OUT	(UART_SPR), A	; Enable read-echoing by default
	
	RET
	
;;; ============================================================================
;;; Writes a single character to UART
;;; A - the character you wish to write
;;; ============================================================================
UART_WriteChar:
	PUSH	BC
	LD	B, A
UART_WriteChar_CheckReady:
	IN	A, (UART_LSR)
	BIT	5, A
 	JP 	Z, UART_WriteChar_CheckReady
	LD	A, B
	OUT	(0x00), A
	POP	BC
	RET

;;; ============================================================================
;;; Reads a single character from UART (blocking)
;;; A - contains the character which was read
;;; ============================================================================
UART_ReadChar:
	PUSH	BC
	IN	A, (UART_LSR)
	BIT	0, A
	JP	Z, UART_ReadChar
	IN	A, (UART_RHR)
	LD	B, A
	IN	A, (UART_SPR)	; Test if echoing is enabled
	CP	0
	JP	Z, UART_ReadChar_Done ; No, just return
	LD	A, B		      ; Yes, write out the character we just read
	CALL	UART_WriteChar
UART_ReadChar_Done:
	LD	A, B
	POP	BC
	RET

;;; ============================================================================
;;; Controls whether characters read from UART are echo-ed back out
;;; ============================================================================	
UART_EnableReadEcho:
	LD	A, 1
	OUT	(UART_SPR), A
	RET

UART_DisableReadEcho:
	LD	A, 0
	OUT	(UART_SPR), A
	RET	

;;; ============================================================================
;;; Reads a line from UART (keeps reading until \n is encountered)
;;; HL - where to store line in memory (must have enough space for number of chars + 1)
;;; B - maximum number of characters to read
;;; ============================================================================
UART_ReadLine:
	CALL	UART_ReadChar
	CP	'\n'
	JP	Z, UART_ReadLine_Finalise
	LD	(HL), A
	INC	HL
	DEC 	B
	JP	Z, UART_ReadLine_Finalise
	JP	UART_ReadLine	
UART_ReadLine_Finalise:
	LD 	(HL), 0x00
	RET
	
;;; ============================================================================	
;;; Writes a null-terminate string to UART
;;; HL - the address of the string
;;; ============================================================================
UART_WriteString:
	PUSH 	AF
	LD	A, (HL)
	CP	A, 0x0		; If we have hit \0, we're done
	JP	Z, UART_WriteString_Done
	CALL	UART_WriteChar
	INC	HL
UART_WriteString_Done:	
	POP 	AF
	RET
	
