;;; ============================================================================
;;; Initialise CF
;;; ============================================================================
CF_Init:
	LD	A, 0x01		; 8-bit mode
	OUT	(CF_FEATURES), A
	LD	A, 0xE0		; LBA addressing
	OUT	(CF_LBA3), A
	LD	A, CF_CMD_SET_FEATURES ; Set up card
	OUT	(CF_CMD), A
	LD	A, 0x01		; Handle one sector at a time
	OUT	(CF_SECCNT), A
	RET

;;; ============================================================================
;;; Waits for CF card to become ready to transfer data
;;; ============================================================================
CF_WaitReady:
	IN	A, (CF_STATUS)	; wait for card to no longer be busy
	AND	%10001000
	XOR	%00001000
	JP	NZ, CF_WaitReady
	RET

CF_FindBlock:
	LD	A, 0xE0		; upper two LBA address bytes are always the same
	OUT	(CF_LBA3), A
	XOR	A
	OUT	(CF_LBA2), A
	LD	C, CF_LBA1	; get the LBA block from DE
	OUT	(C), D
	LD	C, CF_LBA0
	OUT	(C), E
	RET

;;; ============================================================================
;;; Reads a 512 block from a CF card.
;;; DE - sector number
;;; HL - destination
;;; ============================================================================
CF_ReadSector:
	PUSH	BC
	CALL	CF_FindBlock
	LD	A, CF_CMD_READ_SECTOR ; set the command
	OUT	(CF_CMD), A	      ; issue read command
	LD	B, 0		; counter
CF_ReadSector_Loop:
	CALL	CF_WaitReady
	IN	A, (CF_DATA)	; get byte and store
	LD	(HL), A
	INC	HL
	CALL	CF_WaitReady
	IN	A, (CF_DATA)	; get byte and store
	LD	(HL), A
	INC	HL
	DJNZ	CF_ReadSector_Loop
	POP	BC
	RET

;;; ============================================================================
;;; Writes a 512 block to a CF card.
;;; DE - block number
;;; HL - data to write
;;; ============================================================================
CF_WriteBlock:
	PUSH	BC
	PUSH	DE
	CALL	CF_FindBlock
	LD	A, CF_CMD_WRITE_SECTOR ; set the command
	OUT	(CF_CMD), A	      ; issue read command
	LD	B, 0		; counter
CF_WriteBlock_Loop:
	CALL	CF_WaitReady
	LD	A, (HL)		; load byte and write to card
	OUT	(CF_DATA), A
	INC	HL
	CALL	CF_WaitReady
	LD	A, (HL)		; load byte and write to card
	OUT	(CF_DATA), A
	INC	HL
	DJNZ	CF_WriteBlock_Loop
	POP	DE
	POP	BC
	RET
	
