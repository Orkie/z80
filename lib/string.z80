;;; String manipulation routines

;;; ============================================================================
;;; Tests for string equality, Z flag set if they are equal
;;; HL - address of string 1
;;; BC - address of string 2
;;; ============================================================================	
String_Equal:	
	LD	A, (BC)
	CP	(HL)
	RET	NZ
	INC	BC
	INC	HL
	CP	'\0'
	RET	Z
	JP	String_Equal

;;; ============================================================================
;;; Copies the nth word in a string (words separated by spaces)
;;; Will stop copying if \0 is encountered in the source.
;;; HL - source string
;;; DE - destination
;;; B - nth word (0-indexed)
;;; ============================================================================
String_Word:
	PUSH	BC
String_Word_Loop:
	LD	C, (HL)		; Get the next character from source string
	INC	HL
	LD	A, ' '		; If we have read a space, skip to next word
	CP	C
	JP	Z, String_Word_NextWord
	LD	A, 0		; If B != 0, this isn't our word so dont copy it
	CP	B
	LD	A, C		
	JP	NZ, String_Word_SkipCopy
	LD	(DE), A ; Copy character 
	INC	DE
String_Word_SkipCopy:
	CP	'\0'		; If the character was NULL, we're done
	JP	Z, String_Word_Return
	JP	String_Word_Loop ; Otherwise, keep going
String_Word_NextWord:
	LD	A, 0
	CP	B
	JP	Z, String_Word_Finalise ; If B is 0, we're done
	DEC	B
	JP	String_Word_Loop
String_Word_Finalise:
	LD	A, 0x00		; Add null termination to destination string
	LD	(DE), A
String_Word_Return:	
	POP	BC
	RET
	
;;; ============================================================================
;;; Converts a byte to ASCII
;;; A - byte to convert
;;; H - first nibble of byte in ASCII (MSB)
;;; L - first nibble of byte in ASCII (LSB)
;;; ============================================================================	
String_ByteToAscii:
	PUSH	BC
	LD	B, A
	CALL	String_NibbleToAscii ; Convert LSB
	LD	L, A
	LD	A, B		; Convert MSB
	SRA	A
	SRA	A
	SRA	A
	SRA	A
	CALL	String_NibbleToAscii
	LD	H, A	
	POP	BC
	RET

;;; ============================================================================
;;; Converts a byte to ASCII
;;; A - nibble to convert
;;; A - set to ASCII value for nibble
;;; ============================================================================	
String_NibbleToAscii:
	AND	0x0F
	CP	10
	JP	C, String_NibbleToAscii_IsNumber
	ADD 	A, 0x37
	RET
String_NibbleToAscii_IsNumber:
	ADD 	A, 0x30
	RET

;;; ============================================================================
;;; Converts an ASCII hex character to a nibble (any case)
;;; A - ASCII character to convert
;;; A - set to the equivalent nibble value
;;; ============================================================================	
String_AsciiToNibble:
	CP	0x30		; Is this >= '0'?
	RET	C		; Not a valid character
	CP	0x3A		; Is this a number?
	JP	NC, String_AsciiToNibble_Test3 ; No
	SUB	0x30		; It is a number
	RET
String_AsciiToNibble_Test3:
	CP	0x41		; Is this one of the characters between the numbers and letters?
	RET	C		; Yes, not a valid character
	CP	0x47		; Is this an upper case A-F?
	JP	NC, String_AsciiToNibble_Test4 ; No
	SUB	0x37			       ; Yes
String_AsciiToNibble_Test4:
	CP	0x61		; Is this one of the characters between upper and lower case letters?
	RET	C		; Yes, not a valid character
	CP	0x67		; Is this a lower case a-f?
	RET 	NC		; No, not a valid character
	SUB	0x57
	RET

;;; ============================================================================
;;; Converts two ASCII hex characters to a byte
;;; HL - Address of ASCII characters to convert
;;; A - Byte equivalent
;;; ============================================================================		
String_AsciiToByte:
	PUSH	BC
	LD	A, (HL)
	LD	B, A		; Convert MS nibble, and stash in C for use later
	CALL	String_AsciiToNibble
	LD 	C, A
	INC	HL
	LD	A, (HL)		; Convert LSN
	CALL	String_AsciiToNibble
	SLA	C		; Combine the two
	SLA	C
	SLA	C
	SLA	C
	OR 	C
	POP	BC
	RET
	
;;; ============================================================================
;;; Upper cases all letters in a string
;;; HL - address of string to make upper case
;;; ============================================================================
String_ToUpper:
	LD	A, (HL)
	CP	'\0'		; If we've hit end of string, we're done
	RET	Z
	CP	0x61		; If the value is < 'a', no need to do anything
	JP	C, String_ToUpper_Next
	CP	0x7B		; If the value >= '{', no need to do anything
	JP	NC, String_ToUpper_Next
	SUB	0x20		; Modify character
	LD	(HL), A
String_ToUpper_Next:
	INC	HL
	JP 	String_ToUpper
	
;;; ============================================================================
;;; Calculates the length of a string, up to but not including, the terminator
;;; HL - address of string
;;; B - set to length of string
;;; ============================================================================
String_Length:
	LD	A, '\0'
	LD	B, -1
String_Length_Loop:
	INC	B
	CP	(HL)
	INC	HL
	JP	NZ, String_Length_Loop	
	RET

;;; ============================================================================
;;; Counts the number of words in a string.
;;; HL - address of string
;;; B - set to number of words
;;; ============================================================================
String_NumWords:
	LD	A, '\0'
	LD	B, 0
	CP	(HL)
	RET	Z
	INC	B
String_NumWords_Loop:
	CP	(HL)
	RET	Z
	LD	A, ' '
	CP	(HL)
	JP	NZ, String_NumWords_NextChar
	INC	B
String_NumWords_NextChar:
	INC 	HL
	LD	A, '\0'
	JP	String_NumWords_Loop

