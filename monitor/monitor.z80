;;; Monitor program, stored in ROM
	JP 	Main

;;; Strings
S_NL:		db	"\r\n",0
S_Intro:	db	"Z80 Monitor by Adan Scotney\r\n",0
S_Prompt:	db	"> ",0
S_Cmd_Help:	db	"HELP",0
S_Cmd_Out:	db	"OUT",0
S_Cmd_In:	db	"IN",0
S_Cmd_PInit:	db	"PINIT",0
S_Cmd_P:	db	"P",0
S_Help:		db	"Valid commands:\r\n  IN [port] - Reads a byte from an IO port\r\n  OUT [port] [value] - Write a byte to an IO port\r\n  PINIT - Initialise printer\r\n  P [text]\r\n  HELP - Shows this message\r\n",0
S_InvalidCmd:	db	"Unknown command (try HELP)\r\n",0
S_Out_Error:	db	"Expected 2 parameters\r\n",0
S_In_Error:	db	"Expected 1 parameter\r\n",0
	
Main:
	LD	SP, 0x8400	; 1k stack
	LD 	HL, 0x071A	; 10ms initial delay to allow hardware to settle
	CALL	Delay
	CALL 	UART_Init
	LD	HL, S_Intro
	CALL	UART_WriteString

Prompt:	
	LD	HL, S_Prompt	; Write prompt
	CALL	UART_WriteString
	LD	HL, V_Input	; Read a line
	LD	B, 80
	CALL	UART_ReadLine
	LD	A, '\n'
	CALL	UART_WriteChar
	LD	HL, V_Input
	CALL	String_ToUpper
	CALL	Handle_Input
	JP 	Prompt		; Stay in the prompt forever

;;; TODO - This may be neater as a jump table
Handle_Input:
	LD	HL, V_Input	; Get the command
	LD	DE, V_Word
	LD	B, 0
	CALL	String_Word
Handle_Input_Test_Help:	
	LD	HL, V_Word	; Have we been given the command "HELP"?
	LD	BC, S_Cmd_Help
	CALL	String_Equal
	JP	NZ, Handle_Input_Test_In ; No, try the next possibility
	JP 	Handle_Help
	RET
Handle_Input_Test_In:
	LD	HL, V_Word	; Have we been given the command "IN"?
	LD	BC, S_Cmd_In
	CALL	String_Equal
	JP	NZ, Handle_Input_Test_Out ; No, try the next possibility
	JP	Handle_In
	RET	
Handle_Input_Test_Out:
	LD	HL, V_Word	; Have we been given the command "OUT"?
	LD	BC, S_Cmd_Out
	CALL	String_Equal
	JP	NZ, Handle_Input_Test_PInit ; No, try the next possibility
	JP	Handle_Out
	RET
Handle_Input_Test_PInit:
	LD	HL, V_Word	; Have we been given the command "PINIT"?
	LD	BC, S_Cmd_PInit
	CALL	String_Equal
	JP	NZ, Handle_Input_Test_P ; No, try the next possibility
	JP	Handle_PInit
	RET
Handle_Input_Test_P:
	LD	HL, V_Word	; Have we been given the command "P"?
	LD	BC, S_Cmd_P
	CALL	String_Equal
	JP	NZ, Handle_Input_Invalid ; No, try the next possibility
	JP	Handle_P
	RET		
Handle_Input_Invalid:
	LD	HL, S_InvalidCmd
	CALL 	UART_WriteString
	RET

;;; ============================================================================
;;; The HELP command just displays a static message
;;; ============================================================================
Handle_Help:
	LD	HL, S_Intro
	CALL	UART_WriteString
	LD	HL, S_Help
	CALL	UART_WriteString
	RET
	
;;; ============================================================================
;;; OUT {port} {value} writes a byte to an IO port
;;; ============================================================================
Handle_Out:
	LD	HL, V_Input
	CALL	String_NumWords
	LD	A, 3
	CP	B
	JP	Z, Handle_Out_Run
	LD	HL, S_Out_Error
	CALL	UART_WriteString
	RET
Handle_Out_Run:
	LD	HL, V_Input	; Get the port
	LD	DE, V_Word
	LD	B, 1
	CALL	String_Word
	LD	HL, V_Word
	CALL	String_AsciiToByte
	LD	C, A
	LD	HL, V_Input	; Get the byte
	LD	DE, V_Word
	LD	B, 2
	CALL	String_Word
	LD	HL, V_Word
	CALL	String_AsciiToByte
	OUT	(C), A	
	RET

;;; ============================================================================
;;; IN {port} reads a byte from an IO port
;;; ============================================================================
Handle_In:
	LD	HL, V_Input
	CALL	String_NumWords
	LD	A, 2
	CP	B
	JP	Z, Handle_In_Run
	LD	HL, S_In_Error
	CALL	UART_WriteString
	RET
Handle_In_Run:
	LD	HL, V_Input	; Get the port
	LD	DE, V_Word
	LD	B, 1
	CALL	String_Word
	LD	HL, V_Word
	CALL	String_AsciiToByte
	LD	C, A
	IN	A, (C)		; Do it
	CALL	String_ByteToAscii ; Show the byte we read
	LD	A, H
	CALL	UART_WriteChar
	LD	A, L
	CALL	UART_WriteChar
	LD	HL, S_NL
	CALL	UART_WriteString
	RET

;;; ============================================================================
;;; PINIT Initialises a printer
;;; ============================================================================
Handle_PInit:
	CALL	LPT_Init
	RET
	
;;; ============================================================================
;;; P {text} prints some text
;;; ============================================================================
Handle_P:
	LD	HL, V_Input
	INC	HL		; Skip space after command if it exists
	LD	A, (HL)
	CP	'\0'		; If we've hit end of string, stop
	JP	Z, Handle_P_Done
Handle_P_Loop:
	INC	HL
	LD	A, (HL)
	CP	'\0'		; If we've hit end of string, stop
	JP	Z, Handle_P_Done
	CALL	LPT_WriteChar	; Otherwise write to printer
	JP	Handle_P_Loop
Handle_P_Done:
	LD	A, 0x0D		; CR
	CALL	LPT_WriteChar
	LD	A, 0x0A		; LF
	CALL	LPT_WriteChar
	RET
	
;;; Libraries
	include "misc.z80"
	include "uart.z80"
	include "string.z80"
	include "hw.z80"
	include "lpt.z80"

;;; Variables
	org 0x8400

V_Input:	ds	81
V_Word:		ds	81

